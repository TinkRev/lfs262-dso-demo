pipeline {
  agent {
    kubernetes {
      yamlFile 'build-agent.yaml'
      defaultContainer 'maven'
      idleMinutes 1
    }
  }
  parameters {
    string(name: 'IMAGE_NAME', defaultValue: 'dso-demo', description: 'Docker Image Name')
    booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip tests during packaging')
    string(name: 'ARGO_SERVER', defaultValue: 'argo-dev.prlab.io', description: 'argo server')
    string(name: 'ARGO_APPLICATION_NAME', defaultValue: 'dso-demo-dev-ssc', description: 'argo application in server')
  }
  environment {
    IMAGE_TAG = "${BUILD_NUMBER}"
    GIT_USER_EMAIL = credentials('dso-demo-manifest-github-email')
    DEV_URL='http://dso-demo-dev.dev.svc.cluster.local:8080'
  }
  stages {
    stage('Build') {
      parallel {
        stage('Compile') {
          steps {
            container('maven') {
              sh 'mvn compile'
            }
          }
        }
      }
    }
    stage('Static Analysis') {
      parallel {
        stage('SCA') {
          steps {
            container('maven') {
              catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                sh 'mvn org.owasp:dependency-check-maven:check'
              }
            }
          }
          post {
            always {
              archiveArtifacts allowEmptyArchive: true, artifacts: 'target/dependency-check-report.html', fingerprint: true, onlyIfSuccessful: true
            }
          }
        }
        stage('OSS License Checker') {
          steps {
            container('licensefinder') {
              sh 'apt update'
              sh 'apt install git openjdk-17-jdk -y'
              sh 'ls -al'
              sh 'gem install license_finder'
              sh 'license_finder' 
            }
          }
        }
        stage('Generate SBOM') {
          steps {
            container('maven') {
              sh 'mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom'
            }
          }
          post {
            success {
              dependencyTrackPublisher projectName: 'demo-decsecops', projectVersion: '0.0.1', artifact: 'target/bom.xml', autoCreateProjects: true, synchronous: true 
              archiveArtifacts allowEmptyArchive: true, artifacts: 'target/bom.xml', fingerprint: true, onlyIfSuccessful: true
            }
          }
        }
        stage('Unit Tests') {
          steps {
            container('maven') {
              sh 'mvn test'
            }
          }
        }
      }
    }
    stage('SAST') {
      steps {
        container('slscan') {
          sh 'scan --type java,depscan --build'
        }
      }
      post {
        success {
          archiveArtifacts allowEmptyArchive: true,artifacts: 'reports/*', fingerprint: true,onlyIfSuccessful: true
        }
      }
    }
    stage('Package') {
      parallel {
        stage('Create Jarfile') {
          steps {
            container('maven') {
              sh "mvn package ${params.SKIP_TESTS ? '-DskipTests' : ''}"
            }
          }
        }
        stage("Build with Kaniko") {
          steps {
            container('kaniko') {
              sh '/kaniko/executor -f `pwd`/Dockerfile -c `pwd` --insecure --skip-tls-verify --cache=true --force --destination=docker.iodocker.io/rhythmsyu/${params.IMAGE_NAME}:${IMAGE_TAG}'
            }
          }
        }
      }
    }
    stage('Image Analysis') {
      parallel {
        stage('Image Linting') {
          steps {
            container('docker-tools') {
              sh 'dockle docker.io/rhythmsyu/${params.IMAGE_NAME}:${IMAGE_TAG}'
            }
          }
        }
        stage('Image Scan') {
          steps {
            container('docker-tools') {
              sh 'trivy image --timeout 10m --exit-code 1 docker.io/rhythmsyu/${params.IMAGE_NAME}:${IMAGE_TAG}'
            }
          }
        }
      }
    }
    stage('Update K8S manifest & push to Repo') {
      steps {
        container('git') {
          script {
            withCredentials([usernamePassword(credentialsId: 'ssc-github-manifest', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
              // Checkout the repository
              git credentialsId: 'ssc-github', 
                  url: 'https://github.com/TinkRev/argocd-app-k8s-manifest.git',
                  branch: 'main'
              
              def encodedUsername = URLEncoder.encode(GIT_USERNAME, "UTF-8")
              def encodedPassword = URLEncoder.encode(GIT_PASSWORD, "UTF-8")

              // Update the K8S manifest and push the changes
              sh """
                  
                  git config user.email "${GIT_USER_EMAIL}"
                  git config user.name "${GIT_USERNAME}"
    
                  cat ./dso-demo/dev/manifest/deployment.yaml
                  sed -i "s|docker.io/rhythmsyu/dso-demo:.*|docker.io/rhythmsyu/dso-demo:${IMAGE_TAG}|" ./dso-demo/dev/manifest/deployment.yaml
                  cat ./dso-demo/dev/manifest/deployment.yaml
    
                  git add ./dso-demo/dev/manifest/deployment.yaml
                  git commit -m "Updated the ./dso-demo/dev/manifest/pod.yaml | Jenkins Pipeline"
                  git remote -v
                  git remote set-url origin https://${encodedUsername}:${encodedPassword}@github.com/TinkRev/argocd-app-k8s-manifest.git
                  git push origin HEAD:main
                """
            }
          }
        }
      }
    }
    stage('Deploy to Dev') {
      steps {
        withCredentials([string(credentialsId: 'argocd-dev-sync', variable: 'AUTH_TOKEN')]) {
          container('argocd-cli') {
            sh "argocd app sync ${ARGO_APPLICATION_NAME} --insecure --server ${ARGO_SERVER} --auth-token ${AUTH_TOKEN} --grpc-web"
            sh "argocd app wait ${ARGO_APPLICATION_NAME} --health --timeout 300 --insecure --server ${ARGO_SERVER} --auth-token ${AUTH_TOKEN} --grpc-web"
          }
        }
      }
    }
    stage("Dynamic Analysis") {
      parallel {
        stage('E2E test') {
          steps {
            sh 'echo "ALL Test passed"'
          }
        }
        stage('DAST') {
          steps {
            container('zap') {
              sh 'zap-baseline.py -t  $DEV_URL || exit 0 '
            }
          }
        }
      }
    } 
  }
}
