pipeline {
  agent none
  
  stages {
    stage('Build') {
      parallel {
        stage('Compile') {
          agent {
            docker {
                image 'maven:3.9.9-eclipse-temurin-17-alpine'
            }
          }
          steps {
            sh 'mvn compile'
          }
        }
      }
    }
    stage('Static Analysis') {
      parallel {
        stage('SCA') {
          agent {
            docker {
                image 'maven:3.9.9-eclipse-temurin-17-alpine'
            }
          }
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh 'mvn org.owasp:dependency-check-maven:check'
            }
          }
          post {
            always {
              archiveArtifacts allowEmptyArchive: true, artifacts: 'target/dependency-check-report.html', fingerprint: true, onlyIfSuccessful: true
              // dependencyCheckPublisher pattern: 'report.xml'
            }
          }
        }
        stage('OSS License Checker') {
          agent {
            docker {
                image 'licensefinder/license_finder'
            }
          }
          steps {
            sh 'ls -al'
            sh '''#!/bin/bash --login
                  /bin/bash --login
                  rvm use default
                  gem install license_finder
                  license_finder
               '''
          }
        }
        stage('Generate SBOM') {
          agent {
            docker {
                image 'maven:3.9.9-eclipse-temurin-17-alpine'
            }
          }
          steps {
            sh 'mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom'
          }
          post {
            success {
              dependencyTrackPublisher projectName: 'demo-decsecops', projectVersion: '0.0.1', artifact: 'target/bom.xml', autoCreateProjects: true, synchronous: true 
              archiveArtifacts allowEmptyArchive: true, artifacts: 'target/bom.xml', fingerprint: true, onlyIfSuccessful: true
            }
          }
        }
        stage('Unit Tests') {
          agent {
            docker {
                image 'maven:3.9.9-eclipse-temurin-17-alpine'
            }
          }
          steps {
            sh 'mvn test'
          }
        }
      }
    }
    stage('SAST') {
      agent {
        docker {
            image 'shiftleft/sast-scan:v2.1.2'
        }
      }
      steps {
        sh 'scan --type java,depscan --build'
      }
      post {
        success {
          archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/*', fingerprint: true, onlyIfSuccessful: true
        }
      }
    }
    stage('Package') {
      parallel {
        stage('Create Jarfile') {
          agent {
            docker {
                image 'maven:3.9.9-eclipse-temurin-17-alpine'
            }
          }
          steps {
            sh 'mvn package -DskipTests'
          }
        }
        stage('OCI Image BnP'){
          agent {
            docker {
                image 'docker:dind'
                args '-v /var/run/docker.sock:/var/run/docker.sock'
            }
          }
          steps{
            script {
              def app = docker.build("dso-demo:multi-stage")
              app.push()
            }
          }
        }
      }
    }
    stage('Image Analysis') {
      parallel {
        stage('Image Linting') {
          agent {
            docker {
                image 'rmkanda/docker-tools:latest'
            }
          }
          steps {
            sh 'dockle dso-demo:multi-stage'
          }
        }
        stage('Image Scan') {
          agent {
            docker {
                image 'rmkanda/docker-tools:latest'
            }
          }
          steps {
            sh 'trivy image --timeout 10m --exit-code 1 dso-demo:multi-stage'
          }
        }
      }
    }
    stage('Deploy to Dev') {
      agent {
        docker {
            image 'maven:3.9.9-eclipse-temurin-17-alpine'
        }
      }
      steps {
        sh "docker run --name dso-demo --network=devsecops --expose 8083 dso-demo:multistage"
      }
    }
    stage('Dynamic Analysis') {
      parallel {
        stage('E2E tests') {
          steps {
            sh 'echo "All Tests passed!!!"'
          }
        }
        stage('DAST') {
          steps {
             sh 'docker run-t owasp/zap2docker-stable zap-baseline.py-t  $DEV_URL || exit 0'
          }
        }
      }
    }
  }
}
