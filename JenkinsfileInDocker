pipeline {
  agent none

  stages {
    stage('Build') {
      parallel {
        stage('Compile') {
          agent {
            docker {
                image 'maven:alpine'
            }
          }
          steps {
            sh 'mvn compile'
          }
        }
      }
    }
    stage('Static Analysis') {
      parallel {
        stage('SCA') {
          agent {
            docker {
                image 'maven:alpine'
            }
          }
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh 'mvn org.owasp:dependency-check-maven:check'
            }
          }
          post {
            always {
              archiveArtifacts allowEmptyArchive: true, artifacts: 'target/dependency-check-report.html', fingerprint: true, onlyIfSuccessful: true // dependencyCheckPublisher pattern: 'report.xml'
            }
          }
        }
        stage('OSS License Checker') {
          agent {
            docker {
                image 'licensefinder/license_finder'
            }
          }
          steps {
            sh 'ls-al'
            sh '''#!/bin/bash--login
                  /bin/bash--login
                  rvm use default
                  gem install license_finder
                  license_finder
               '''
          }
        }
        stage('Generate SBOM') {
          agent {
            docker {
                image 'maven:alpine'
            }
          }
          steps {
            sh 'mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom'
          }
          post {
            success {
              dependencyTrackPublisher projectName: 'sample-spring-app', projectVersion: '0.0.1', artifact: 'target/bom.xml', autoCreateProjects: true, synchronous: true 
              archiveArtifacts allowEmptyArchive: true, artifacts: 'target/bom.xml', fingerprint: true, onlyIfSuccessful: true
            }
          }
        }
        stage('Unit Tests') {
          agent {
            docker {
                image 'maven:alpine'
            }
          }
          steps {
            sh 'mvn test'
          }
        }
      }
    }
    stage('Package') {
      parallel {
        stage('Create Jarfile') {
          agent {
            docker {
                image 'maven:alpine'
            }
          }
          steps {
            sh 'mvn package -DskipTests'
          }
        }
      }
    }

    stage('Deploy to Dev') {
      agent {
        docker {
            image 'maven:alpine'
        }
      }
      steps {
        // TODO
        sh "echo done"
      }
    }
  }
}
