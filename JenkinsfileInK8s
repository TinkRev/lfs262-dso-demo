pipeline {
  agent {
    kubernetes {
      yamlFile 'build-agent.yaml'
      defaultContainer 'maven'
      idleMinutes 1
    }
  }
  parameters {
    string(name: 'IMAGE_NAME', defaultValue: 'dso-demo', description: 'Docker Image Name')
    booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip tests during packaging')
    string(name: 'ARGO_SERVER', defaultValue: 'argo-dev.prlab.io', description: 'argo server')
    string(name: 'ARGO_APPLICATION_NAME', defaultValue: 'dso-demo-dev-ssc', description: 'argo application in server')
  }
  environment {
    IMAGE_TAG = "${BUILD_NUMBER}"
    GIT_USER_NAME = credentials('dso-demo-manifest-github-username')
    GIT_USER_EMAIL = credentials('dso-demo-manifest-github-email')
    GIT_CREDENTIALS = credentials('ssc-github')
  }
  stages {
    stage('Build') {
      parallel {
        stage('Compile') {
          steps {
            container('maven') {
              sh 'mvn compile'
            }
          }
        }
      }
    }
    stage('Test') {
      parallel {
        stage('Unit Tests') {
          steps {
            container('maven') {
              sh 'mvn test'
            }
          }
        }
      }
    }
    stage('Package') {
      parallel {
        stage('Create Jarfile') {
          steps {
            container('maven') {
              sh "mvn package ${params.SKIP_TESTS ? '-DskipTests' : ''}"
            }
          }
        }
        stage("Build with Kaniko") {
          steps {
            container('kaniko') {
              sh """
                /kaniko/executor \
                  -f `pwd`/Dockerfile \
                  -c `pwd` \
                  --insecure \
                  --skip-tls-verify \
                  --cache=true \
                  --force \
                  --destination=docker.io/rhythmsyu/${params.IMAGE_NAME}:${IMAGE_TAG}
              """
            }
          }
        }
      }
    }
    stage('Update K8S manifest & push to Repo') {
      steps {
        container('git') {
            // Checkout the repository
            git credentialsId: 'ssc-github', 
                url: 'git@github.com/TinkRev/argocd-app-k8s-manifest.git',
                branch: 'main'

            // Update the K8S manifest and push the changes
            sh """
                git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"
                git config user.email "${GIT_USER_EMAIL}"
                git config user.name "${GIT_USERNAME}"
                
  
                cat ./dso-demo/dev/manifest/pod.yaml
                sed -i "s|docker.io/rhythmsyu/dso-demo:.*|docker.io/rhythmsyu/dso-demo:${IMAGE_TAG}|" ./dso-demo/dev/manifest/pod.yaml
                cat ./dso-demo/dev/manifest/pod.yaml
  
                git add ./dso-demo/dev/manifest/pod.yaml
                git commit -m "Updated the ./dso-demo/dev/manifest/pod.yaml | Jenkins Pipeline"
                git remote -v
                git push -u origin main
              """
        }
      }
    }
    stage('Deploy to Dev') {
      steps {
        withCredentials([string(credentialsId: 'argocd-dev-sync', variable: 'AUTH_TOKEN')]) {
          container('argocd-cli') {
            sh "argocd app sync ${ARGO_APPLICATION_NAME} --insecure --server ${ARGO_SERVER} --auth-token ${AUTH_TOKEN} --grpc-web"
            sh "argocd app wait ${ARGO_APPLICATION_NAME} --health --timeout 300 --insecure --server ${ARGO_SERVER} --auth-token ${AUTH_TOKEN} --grpc-web"
          }
        }
      }
    }
  }
}
